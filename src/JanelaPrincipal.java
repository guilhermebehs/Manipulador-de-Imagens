
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author guilherme.behs
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form Janela
     */
    public JanelaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bSelecionaImagem = new javax.swing.JButton();
        bGreyscale = new javax.swing.JButton();
        bRotacao = new javax.swing.JButton();
        bTranslacao = new javax.swing.JButton();
        bEscalonacao = new javax.swing.JButton();
        bEspelhamento = new javax.swing.JButton();
        bBrilhoContraste = new javax.swing.JButton();
        bMostraInfo = new javax.swing.JButton();
        bBordas = new javax.swing.JButton();
        bHistograma = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bSelecionaImagem.setText("Selecione a imagem");
        bSelecionaImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelecionaImagemActionPerformed(evt);
            }
        });

        bGreyscale.setText("Greyscale");
        bGreyscale.setEnabled(false);
        bGreyscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGreyscaleActionPerformed(evt);
            }
        });

        bRotacao.setText("Rotação");
        bRotacao.setEnabled(false);
        bRotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRotacaoActionPerformed(evt);
            }
        });

        bTranslacao.setText("Translação");
        bTranslacao.setEnabled(false);
        bTranslacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTranslacaoActionPerformed(evt);
            }
        });

        bEscalonacao.setText("Escalonamento");
        bEscalonacao.setEnabled(false);
        bEscalonacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEscalonacaoActionPerformed(evt);
            }
        });

        bEspelhamento.setText("Espelhamento");
        bEspelhamento.setEnabled(false);
        bEspelhamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEspelhamentoActionPerformed(evt);
            }
        });

        bBrilhoContraste.setText("Mudar Brilho e Contraste");
        bBrilhoContraste.setEnabled(false);
        bBrilhoContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBrilhoContrasteActionPerformed(evt);
            }
        });

        bMostraInfo.setText("Mostrar informações");
        bMostraInfo.setEnabled(false);
        bMostraInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMostraInfoActionPerformed(evt);
            }
        });

        bBordas.setText("Detectar Bordas");
        bBordas.setEnabled(false);
        bBordas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBordasActionPerformed(evt);
            }
        });

        bHistograma.setText("Histograma");
        bHistograma.setEnabled(false);
        bHistograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHistogramaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bRotacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bGreyscale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bSelecionaImagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bTranslacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bEscalonacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bEspelhamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bBrilhoContraste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bMostraInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bBordas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bHistograma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(bSelecionaImagem)
                .addGap(18, 18, 18)
                .addComponent(bHistograma, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(bBordas, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bGreyscale, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bBrilhoContraste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bMostraInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bRotacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bTranslacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bEscalonacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bEspelhamento)
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSelecionaImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelecionaImagemActionPerformed
     
     Rotinas rotinas = new Rotinas();
     String mensagem = "";   
     final JFileChooser fc = new JFileChooser();
     int returnVal = fc.showOpenDialog(this);
     try{
      if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            imagem = ImageIO.read(file);
            
          
            imagemPixels = new int[imagem.getWidth()][imagem.getHeight()];
            for(int y=0; y < imagem.getHeight(); y++)
                 for(int x=0; x < imagem.getWidth(); x++){ 
                     Color color = new Color(imagem.getRGB(x, y));
                     imagemPixels[x][y]= color.getRed();
                 }
           
           JanelaImagemOriginal imagemOriginal = new JanelaImagemOriginal(imagem);
           imagemOriginal.exibir();
            
           bGreyscale.setEnabled(true);
           bRotacao.setEnabled(true);
           bTranslacao.setEnabled(true);
           bEscalonacao.setEnabled(true);
           bEspelhamento.setEnabled(true);
           bBrilhoContraste.setEnabled(true);
           bBordas.setEnabled(true);
           bMostraInfo.setEnabled(true);
           bHistograma.setEnabled(true);
        
      }    
      
      }catch(Exception e){
           e.printStackTrace();
      }
    }//GEN-LAST:event_bSelecionaImagemActionPerformed

    private void bRotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRotacaoActionPerformed
        String angulo=JOptionPane.showInputDialog(this, "Informe o ângulo da rotação em graus:");
        JanelaAlterarImagem janela = new JanelaAlterarImagem();
      
        janela.rotacao(imagem,Double.parseDouble(angulo));
    }//GEN-LAST:event_bRotacaoActionPerformed

    private void bGreyscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGreyscaleActionPerformed
       JanelaAlterarImagem janela = new JanelaAlterarImagem();
        janela.grayscale(imagem);
    }//GEN-LAST:event_bGreyscaleActionPerformed

    private void bTranslacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTranslacaoActionPerformed
        
        String translacaox=JOptionPane.showInputDialog(this, "Informe o valor de translação no eixo x:");
        String translacaoy=JOptionPane.showInputDialog(this, "Informe o valor de translação no eixo y:");
        JanelaAlterarImagem janela = new JanelaAlterarImagem();
        janela.translacao(imagem,Double.parseDouble(translacaox),Double.parseDouble(translacaoy));
    }//GEN-LAST:event_bTranslacaoActionPerformed

    private void bEscalonacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEscalonacaoActionPerformed
        String escalonacaox=JOptionPane.showInputDialog(this, "Informe o valor de escalonamento no eixo x:");
        String escalonacaoy=JOptionPane.showInputDialog(this, "Informe o valor de escalonamento no eixo y:");
        JanelaAlterarImagem janela = new JanelaAlterarImagem();
        janela.escalonamento(imagem,Double.parseDouble(escalonacaox),Double.parseDouble(escalonacaoy));
    }//GEN-LAST:event_bEscalonacaoActionPerformed

    private void bEspelhamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEspelhamentoActionPerformed

        JanelaAlterarImagem janela = new JanelaAlterarImagem();
        janela.espelhamento(imagem);
    }//GEN-LAST:event_bEspelhamentoActionPerformed

    private void bBrilhoContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBrilhoContrasteActionPerformed
        
        String brilho=JOptionPane.showInputDialog(this, "Informe o valor do brilho:");
        String contraste=JOptionPane.showInputDialog(this, "Informe o valor do contraste:");
        JanelaAlterarImagem janela = new JanelaAlterarImagem();
        janela.brilhoContraste(imagem, Integer.parseInt(brilho), Integer.parseInt(contraste));
       
    }//GEN-LAST:event_bBrilhoContrasteActionPerformed

    private void bMostraInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMostraInfoActionPerformed
        Rotinas rotinas = new Rotinas();
        String resultado ="";
        resultado +="Média: "+ rotinas.media(imagemPixels)+"\n";
        resultado +="Mediana: "+ rotinas.mediana(imagemPixels)+"\n";
        resultado +="Moda: "+ rotinas.moda(imagemPixels)+"\n";
        resultado +="Variância: "+ rotinas.variancia(imagemPixels)+"\n";
        JOptionPane.showMessageDialog(this, resultado);
    }//GEN-LAST:event_bMostraInfoActionPerformed

    private void bBordasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBordasActionPerformed
       JanelaAlterarImagem janela = new JanelaAlterarImagem();
       String threshold=JOptionPane.showInputDialog(this, "Informe o valor de threshold:");
       janela.bordas(imagem, Integer.parseInt(threshold));
        // TODO add your handling code here:
    }//GEN-LAST:event_bBordasActionPerformed

    private void bHistogramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHistogramaActionPerformed
        
        Rotinas rotinas = new Rotinas();

        JOptionPane.showMessageDialog(this, rotinas.histograma(imagemPixels));
        
    }//GEN-LAST:event_bHistogramaActionPerformed
     int[][] imagemPixels;
     BufferedImage imagem;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBordas;
    private javax.swing.JButton bBrilhoContraste;
    private javax.swing.JButton bEscalonacao;
    private javax.swing.JButton bEspelhamento;
    private javax.swing.JButton bGreyscale;
    private javax.swing.JButton bHistograma;
    private javax.swing.JButton bMostraInfo;
    private javax.swing.JButton bRotacao;
    private javax.swing.JButton bSelecionaImagem;
    private javax.swing.JButton bTranslacao;
    // End of variables declaration//GEN-END:variables
}
